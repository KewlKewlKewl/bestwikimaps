<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <!-- Regular Text Font: -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Lato&display=swap" rel="stylesheet">

  <!-- <h1> Your New Map Text Style: -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap" rel="stylesheet">

  <!-- All Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" integrity="sha512-YWzhKL2whUzgiheMoBFwW8CKV4qpHQAEuvilg9FAn5VJUDwKZZxkJNuGM4XkWuk94WCrrwslk8yWNGmY1EduTA==" crossorigin="anonymous" referrerpolicy="no-referrer"/>
  <!-- Single_Map Styling-->
  <link rel="stylesheet" type="text/css" href="/styles/single_map_edit.css">
  <!-- Header Styling -->
  <link rel="stylesheet" href="/styles/_header.css" type="text/css"/>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Lato:ital,wght@0,300;0,400;1,900&display=swap" rel="stylesheet">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Lato:ital,wght@0,300;0,400;1,900&family=Oxygen:wght@700&display=swap" rel="stylesheet">

  <title>Viewing Map</title>
  <style>
    #map {
        height: 825px;
        width: 80%;
    }
  </style>
<!-- Requiring jQuery from host server -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<!-- <script type="text/javascript" src="scripts/create_map.js"></script> -->
<script type="text/javascript" src="/scripts/_header.js"></script>
<script type="text/javascript" src="/scripts/app.js"></script>
</head>

<body>
  <%- include('./_header'); %>
  <div id='mapAndForms'>
    <!-- Map -->
    <div id="map">
    </div>

    <div id="rightOfMap">

      <div id = 'mainMapTitle'><%= queryObj[0].map_title %></div>
      <div id = 'mainMapDescription'>Description: <%= queryObj[0].map_desc %></div>
      <div id = 'mapOwner'>Owner: <%= queryObj[0].owner %></div>

  <!-- Point Form -->
  <form id="pointForm">
    <label for="pointTitle">Point Title:</label><br>
    <input type="text" name="pointTitle" id="pointTitle"><br>
    <label for="pointDescription">Point Description:</label><br>
    <input type="text" name="pointDescription" id="pointDescription"><br>
    <label for="point-image">Point Image:</label><br>
    <input type="text" placeholder="http://" name="point-image" id="point-image"><br>
    <label for="category">Choose a Category:</label>
    <select name="category" id="category">
      <option value="Food">Food</option>
      <option value="Shopping">Shopping</option>
      <option value="Nature">Nature</option>
      <option value="Nightlife">Nightlife</option>
    </select>
    <button type='submit' class='pointButton'>Create Point</button>
  </form>
  <br>
  <table id="pointsList">
  </table>

  <!-- Maps Edit (Leads to adding or deleting pins on the selected map) -->
  <form id='save-map'>
    <button class = "saveButtonClass" type='submit'>SAVE MAP</button>
  </form>
  </div>
</div>
  <!-- This is where the individual marker coords are displayed and fetched for the generation of each markers array element -->
  <div id="marker_coords">
  </div>

  <!-- This is where all saved points are displayed -->


  <!-- SCRIPTS -->
<script>

  let map;

  let visualMarkers = [];

  const queryData = <%- JSON.stringify(queryObj) %> //passes query object (templateVars) to <script> and allows us to use it in our JS. I DO NOT KNOW WHY THIS IS ERRORED, code works fine with nothing consoling with issues
  //Array of markers
  const markers = [];

  // simple reference to the pointsTable
    const pointsTable = document.getElementById('pointsList');

    // event listener for clicks onto any "delete point" button - removes the HTML element and marker from markers array (so it's not submitted to the DB when we save the map)
    pointsTable.addEventListener('click', (event) => {

      // if you click anywhere in the table aside from the removeItem button - it does nothing
      if (!event.target.classList.contains('removeItem')) {
        return;
      }

      // if you did click on the removeItem button - this determines the point title of the row we just deleted to also remove it from the markers table
      const deletedPointTitle = event.target.parentNode.parentNode.id;

      // this counter keeps track of the marker index that we removed from the markers array
      let removedMarkerIndex = 0;

      // find the index of the marker from the markers array using the pointTitle - this index is then used to remove the marker from the markers list and to remove the visual marker - WARNING, each point title must be unique using this logic
      for (let i = 0; i < markers.length; i++) {
        if (markers[i].pointTitle === deletedPointTitle) {
          removedMarkerIndex = i;
          // console.log(removedMarkerIndex);
        }
      }

      // saves the respect lat and lng for the removed marker from the markers array
      let markerLat = markers[removedMarkerIndex].coordinates.lat;
      let markerLng = markers[removedMarkerIndex].coordinates.lng;

      for (let j = 0; j < visualMarkers.length; j++) {
        // the marketLat and markerLng are not fixed length or integer types so the only way to have these equal the coords for the visualMarker is to convert to float then to fixed decimal places
        if (parseFloat(markerLat).toFixed(4) === visualMarkers[j].position.lat().toFixed(4) && parseFloat(markerLng).toFixed(4) === visualMarkers[j].position.lng().toFixed(4)) {
          removeMarkers();
          visualMarkers.splice(j, 1);
          setMapOnAll(map);
        }
      }

      // this removes the marker (aka point) we deleted from the markers array
      markers.splice(removedMarkerIndex, 1);

      // I think* this is for the button's functionality but I haven't noticed it actually do anything yet
      event.preventDefault();

      // This re-sets the map with points

      // this deletes the actual HTML element from the DOM
      event.target.parentNode.parentNode.remove();

    });


    //EDIT POINT LOGIC
    pointsTable.addEventListener('click', (event) => {
      // if you click anywhere in the table aside from the removeItem button - it does nothing
      if (!event.target.classList.contains('editItem')) {
        return;
      }
      const editedPointTitle = event.target.parentNode.parentNode.id;
      const htmlNodeArray = event.target.parentNode.parentNode.children
      for (marker of markers) {
        if (marker.pointTitle === editedPointTitle) {
          marker.pointTitle = htmlNodeArray[0].innerHTML;
          marker.pointDescription = htmlNodeArray[1].innerHTML;
          marker.category = htmlNodeArray[4].innerHTML;
          marker.content = htmlNodeArray[0].innerHTML;
          // iconSelector(htmlNodeArray[4].innerHTML);

          event.target.parentNode.parentNode.id = htmlNodeArray[0].innerHTML;

          for (let i = 0; i < visualMarkers.length; i++) {
            if (parseFloat(marker.coordinates.lat).toFixed(4) === visualMarkers[i].position.lat().toFixed(4) && parseFloat(marker.coordinates.lng).toFixed(4) === visualMarkers[i].position.lng().toFixed(4)) {
              visualMarkers[i].icon = iconSelector(marker.category);
            }
          }
        }
      }
      removeMarkers();
      setMapOnAll(map);
    })

    // Initializes the Google map based on currently hard-coded lat, long values
    function initMap() {
      //set up initial map for New Orleans as default
      const options = {  // Creates map options to add to the default map.
          zoom:14,
          center:{lat:51.0447,lng:-114.0719}
      }
      //let map = new google.maps.Map(document.getElementById('map'), options); //Creates the map and includes the options.
      map = new google.maps.Map(document.getElementById('map'), options); //Creates the map and includes the options.

      for (let points of queryData) {
        markers.push({coordinates: {lat: Number(points.latitude), lng: Number(points.longitude)}, pointTitle: points.title.toString(), pointDescription: points.description.toString(), category: points.category.toString(), content: points.title, pointImage: points.point_image});
      }

      //Listen for click on map
      google.maps.event.addListener(map, 'click', function(event){
          editMarker({coordinates:event.latLng, iconImage: iconSelector(document.getElementById("category").value)}); //Add marker
          // setMapOnAll(map);
          document.getElementById("marker_coords").innerHTML=event.latLng.toUrlValue();
      });

      // Listens for the submission of the pointForm button which then creates a markerElement containing coordinates (lat, lng), pointTitle, pointDescription
      document.getElementById("pointForm").addEventListener('submit',(event) => {
        event.preventDefault();
        //console.log("event", event);
        //console.log("pointTitle", document.getElementById("pointTitle").value);
        markers.push(
          {
            coordinates: {
              lat:document.getElementById("marker_coords").innerHTML.split(',')[0],
              lng:document.getElementById("marker_coords").innerHTML.split(',')[1]
            },
            pointTitle: document.getElementById("pointTitle").value,
            pointDescription: document.getElementById("pointDescription").value,
            category: document.getElementById("category").value,
            pointImage: document.getElementById("point-image").value
          }
        );
        generatePointsList(markers);
      });

      document.getElementById("save-map").addEventListener('submit', (event) => {
        event.preventDefault();

        $.ajax({
          url: '/api/maps/mapid/edit',
          method: "POST",
          data: {
            markers,
            mapId: queryData[0].map_id
            }
        })
        .then((result)=>{
          window.location.href = "/api/maps/" + result.mapID; //this forces the redirect
        })
        .catch((error)=>{
          console.log('error:',error);
        });
      });

      // Loop through markers
      for(let i = 0;i < markers.length;i++) {
          editMarker(markers[i]);
      }

      generatePointsList(markers);

  }
</script>

  <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDMNp3SzabTd8aZW6jzofga5kNv8K6sy9U&callback=initMap">
  </script>

</body>
</html>
